package com.tlongdev.bktf;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.ColorStateList;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.preference.PreferenceManager;

import com.tlongdev.bktf.data.DatabaseContract.PriceEntry;
import com.tlongdev.bktf.model.Currency;
import com.tlongdev.bktf.model.Price;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Utility class (static only).
 */
public class Utility {

    /**
     * Log tag for logging.
     */
    @SuppressWarnings("unused")
    private static final String LOG_TAG = Utility.class.getSimpleName();

    public static final double EPSILON = 0.0001;

    /**
     * Returns a color integer associated with a particular resource ID. If the
     * resource holds a complex {@link ColorStateList}, then the default color
     * from the set is returned.
     *
     * @param id      The desired resource identifier, as generated by the aapt
     *                tool. This integer encodes the package, type, and resource
     *                entry. The value 0 is an invalid identifier.
     * @param context the context
     * @return A single color value in the form 0xAARRGGBB.
     */
    public static int getColor(Context context, int id) {
        if (Build.VERSION.SDK_INT >= 23) {
            return context.getResources().getColor(id, null);
        } else {
            //noinspection deprecation
            return context.getResources().getColor(id);
        }
    }

    /**
     * Convenient method for getting the steamId (or vanity user name) of the user.
     *
     * @param context context for getting the shared preferences
     * @return user's steam id
     */
    public static String getSteamId(Context context) {
        //get the steamID from shared preferences if present
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
        String steamId = prefs.getString(context.getString(R.string.pref_steam_id), null);
        //if steamId is null, steamId.equals will crash
        if (steamId != null && steamId.equals("")) {
            return null;
        }
        return steamId;
    }

    /**
     * Convenient method for getting the resolved steamId of the user.
     *
     * @param context context for getting the shared preferences
     * @return user's resolved steam id
     */
    public static String getResolvedSteamId(Context context) {
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
        return prefs.getString(context.getString(R.string.pref_resolved_steam_id), null);
    }

    /**
     * Get the name of the unusual effect.
     *
     * @param index index corresponding to the effect
     * @return the name of the unusual effect
     */
    public static String getUnusualEffectName(Context context, int index) {
        //Just a huge switch-case that needs to be extended everytime a new effect is added.
        switch (index) {
            case 4:
                return context.getString(R.string.array_effects_community_sparkle);
            case 5:
                return context.getString(R.string.array_effects_holy_glow);
            case 6:
                return context.getString(R.string.array_effects_green_confetti);
            case 7:
                return context.getString(R.string.array_effects_purple_confetti);
            case 8:
                return context.getString(R.string.array_effects_haunted_ghosts);
            case 9:
                return context.getString(R.string.array_effects_green_energy);
            case 10:
                return context.getString(R.string.array_effects_purple_energy);
            case 11:
                return context.getString(R.string.array_effects_circling_tf_logo);
            case 12:
                return context.getString(R.string.array_effects_massed_flies);
            case 13:
                return context.getString(R.string.array_effects_burning_flames);
            case 14:
                return context.getString(R.string.array_effects_scorching_flames);
            case 15:
                return context.getString(R.string.array_effects_searing_plasma);
            case 16:
                return context.getString(R.string.array_effects_vivid_plasma);
            case 17:
                return context.getString(R.string.array_effects_sunbeams);
            case 18:
                return context.getString(R.string.array_effects_circling_peace_sign);
            case 19:
                return context.getString(R.string.array_effects_circling_heart);
            case 29:
                return context.getString(R.string.array_effects_stormy_storm);
            case 30:
                return context.getString(R.string.array_effects_blizzardy_storm);
            case 31:
                return context.getString(R.string.array_effects_nuts_n_bolts);
            case 32:
                return context.getString(R.string.array_effects_orbiting_planets);
            case 33:
                return context.getString(R.string.array_effects_orbiting_fire);
            case 34:
                return context.getString(R.string.array_effects_bubbling);
            case 35:
                return context.getString(R.string.array_effects_smoking);
            case 36:
                return context.getString(R.string.array_effects_steaming);
            case 37:
                return context.getString(R.string.array_effects_flaming_lantern);
            case 38:
                return context.getString(R.string.array_effects_cloudy_moon);
            case 39:
                return context.getString(R.string.array_effects_cauldron_bubbles);
            case 40:
                return context.getString(R.string.array_effects_eerie_orbiting_fire);
            case 43:
                return context.getString(R.string.array_effects_knifestorm);
            case 44:
                return context.getString(R.string.array_effects_misty_skull);
            case 45:
                return context.getString(R.string.array_effects_harvest_moon);
            case 46:
                return context.getString(R.string.array_effects_secret);
            case 47:
                return context.getString(R.string.array_effects_stormy_13th_hour);
            case 56:
                return context.getString(R.string.array_effects_kill_a_watt);
            case 57:
                return context.getString(R.string.array_effects_terror_watt);
            case 58:
                return context.getString(R.string.array_effects_cloud_9);
            case 59:
                return context.getString(R.string.array_effects_aces_high);
            case 60:
                return context.getString(R.string.array_effects_dead_presidents);
            case 61:
                return context.getString(R.string.array_effects_miami_nights);
            case 62:
                return context.getString(R.string.array_effects_disco_beat_down);
            case 63:
                return context.getString(R.string.array_effects_phosphorous);
            case 64:
                return context.getString(R.string.array_effects_sulphurous);
            case 65:
                return context.getString(R.string.array_effects_memory_leak);
            case 66:
                return context.getString(R.string.array_effects_overclocked);
            case 67:
                return context.getString(R.string.array_effects_electrostatic);
            case 68:
                return context.getString(R.string.array_effects_power_surge);
            case 69:
                return context.getString(R.string.array_effects_anti_freeze);
            case 70:
                return context.getString(R.string.array_effects_time_warp);
            case 71:
                return context.getString(R.string.array_effects_green_black_hole);
            case 72:
                return context.getString(R.string.array_effects_roboactive);
            case 73:
                return context.getString(R.string.array_effects_arcana);
            case 74:
                return context.getString(R.string.array_effects_spellbound);
            case 75:
                return context.getString(R.string.array_effects_chiroptera_venenata);
            case 76:
                return context.getString(R.string.array_effects_poisoned_shadows);
            case 77:
                return context.getString(R.string.array_effects_something_burning);
            case 78:
                return context.getString(R.string.array_effects_hellfire);
            case 79:
                return context.getString(R.string.array_effects_darkblaze);
            case 80:
                return context.getString(R.string.array_effects_demonflame);
            case 81:
                return context.getString(R.string.array_effects_bonzo);
            case 82:
                return context.getString(R.string.array_effects_amaranthine);
            case 83:
                return context.getString(R.string.array_effects_stare_from_beyond);
            case 84:
                return context.getString(R.string.array_effects_the_ooze);
            case 85:
                return context.getString(R.string.array_effects_ghastly_ghosts_jr);
            case 86:
                return context.getString(R.string.array_effects_haunted_phantasm_jr);
            case 87:
                return context.getString(R.string.array_effects_frostbite);
            case 88:
                return context.getString(R.string.array_effects_molten_mallard);
            case 89:
                return context.getString(R.string.array_effects_morning_glory);
            case 90:
                return context.getString(R.string.array_effects_death_at_dusk);
            case 91:
                return context.getString(R.string.array_effects_abduction);
            case 92:
                return context.getString(R.string.array_effects_atomic);
            case 93:
                return context.getString(R.string.array_effects_subatomic);
            case 94:
                return context.getString(R.string.array_effects_electric_protector);
            case 95:
                return context.getString(R.string.array_effects_magnetic_protector);
            case 96:
                return context.getString(R.string.array_effects_voltaic_protector);
            case 97:
                return context.getString(R.string.array_effects_galactic_codex);
            case 98:
                return context.getString(R.string.array_effects_ancient_codex);
            case 99:
                return context.getString(R.string.array_effects_nebula);
            case 701:
                return context.getString(R.string.array_effects_hot);
            case 702:
                return context.getString(R.string.array_effects_isotope);
            case 703:
                return context.getString(R.string.array_effects_cool);
            case 704:
                return context.getString(R.string.array_effects_energy_orb);
            case 3001:
                return context.getString(R.string.array_effects_showstopper);
            case 3003:
                return context.getString(R.string.array_effects_holy_grail);
            case 3004:
                return context.getString(R.string.array_effects_72);
            case 3005:
                return context.getString(R.string.array_effects_fountain_of_delight);
            case 3006:
                return context.getString(R.string.array_effects_screaming_tiger);
            case 3007:
                return context.getString(R.string.array_effects_skill_gotten_gains);
            case 3008:
                return context.getString(R.string.array_effects_midnight_whirlwind);
            case 3009:
                return context.getString(R.string.array_effects_silver_cyclone);
            case 3010:
                return context.getString(R.string.array_effects_mega_strike);
            case 3011:
                return context.getString(R.string.array_effects_haunted_phantasm);
            case 3012:
                return context.getString(R.string.array_effects_ghastly_ghosts);
            default:
                return "";
        }
    }

    /**
     * Check if the given steamId is a 64bit steamId using Regex.
     *
     * @param id steamId to examine
     * @return true if the steamId is actually a steamId
     */
    public static boolean isSteamId(String id) {
        //Every steamId looks like this: 7656119XXXXXXXXX
        return id.matches("7656119[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]");
    }

    /**
     * Format the unix timestamp the a user readable string.
     *
     * @param unixSeconds unix timestamp to be formatted
     * @return formatted string
     */
    public static String formatUnixTimeStamp(long unixSeconds) {
        Date date = new Date(unixSeconds * 1000L); // *1000 is to convert seconds to milliseconds
        //European format
        @SuppressLint("SimpleDateFormat") SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return sdf.format(date);
    }

    /**
     * Format the timestamp to a user friendly string that is the same as on steam profile pages.
     *
     * @param time timestamp to be formatted
     * @return formatted string
     */
    public static String formatLastOnlineTime(Context context, long time) {
        //If the time is longer than 2 days tho format is X days ago.
        if (time >= 172800000L) {
            long days = time / 86400000;
            return context.getString(R.string.time_passed_day_plural, days);
        }
        //If the time is longer than an hour, the format is X hour(s) Y minute(s) ago.
        if (time >= 3600000L) {
            long hours = time / 3600000;
            if (time % 3600000L == 0) {
                if (hours == 1)
                    return context.getString(R.string.time_passed_hour, hours);
                else {
                    return context.getString(R.string.time_passed_hour_plural, hours);
                }
            } else {
                long minutes = (time % 3600000L) / 60000;
                if (hours == 1)
                    if (minutes == 1)
                        return context.getString(R.string.time_measure_hour_minute, hours, minutes);
                    else
                        return context.getString(R.string.time_measure_hour_minute_p, hours, minutes);
                else {
                    if (minutes == 1)
                        return context.getString(R.string.time_measure_hour_p_minute, hours, minutes);
                    else
                        return context.getString(R.string.time_measure_hour_p_minute_p, hours, minutes);
                }
            }
        }
        //Else it was less than an hour ago, the format is X minute(s) ago.
        else {
            long minutes = time / 60000;
            if (minutes == 0) {
                return context.getString(R.string.time_measure_just_now);
            } else if (minutes == 1) {
                return context.getString(R.string.time_passed_minute, 1);
            } else {
                return context.getString(R.string.time_passed_minute_plural, minutes);
            }
        }
    }

    /**
     * Retrieves the steamId from a properly formatted JSON returned by the ResolveSteamId api.
     *
     * @param userJsonStr JSON string
     * @return steamId
     * @throws JSONException
     */
    public static String parseSteamIdFromVanityJson(String userJsonStr) throws JSONException {
        final String OWM_RESPONSE = "response";
        final String OWM_SUCCESS = "success";
        final String OWM_STEAM_ID = "steamid";
        final String OWM_MESSAGE = "message";

        JSONObject jsonObject = new JSONObject(userJsonStr);
        JSONObject response = jsonObject.getJSONObject(OWM_RESPONSE);

        if (response.getInt(OWM_SUCCESS) != 1) {
            //Return the error message if unsuccessful.
            return response.getString(OWM_MESSAGE);
        }

        return response.getString(OWM_STEAM_ID);
    }

    /**
     * Retrieves the username from a properly formatted JSON returned by the GetPlayerSummaries Api.
     *
     * @param jsonString JSON string
     * @return user name
     * @throws JSONException
     */
    public static String parseUserNameFromJson(String jsonString) throws JSONException {
        final String OWM_RESPONSE = "response";
        final String OWM_PLAYERS = "players";
        final String OWM_NAME = "personaname";

        JSONObject jsonObject = new JSONObject(jsonString);
        JSONObject response = jsonObject.getJSONObject(OWM_RESPONSE);
        JSONArray players = response.getJSONArray(OWM_PLAYERS);
        JSONObject player = players.getJSONObject(0);

        return player.getString(OWM_NAME);
    }

    /**
     * Retrieves the url for the user avatar from a proerly formatted JSON returned by the
     * GetPlayerSummaries Api.
     *
     * @param jsonString JSON string
     * @return avatar image link
     * @throws JSONException
     */
    public static String parseAvatarUrlFromJson(String jsonString) throws JSONException {
        final String OWM_RESPONSE = "response";
        final String OWM_PLAYERS = "players";
        final String OWM_AVATAR = "avatarfull";

        JSONObject jsonObject = new JSONObject(jsonString);
        JSONObject response = jsonObject.getJSONObject(OWM_RESPONSE);
        JSONArray players = response.getJSONArray(OWM_PLAYERS);
        JSONObject player = players.getJSONObject(0);

        return player.getString(OWM_AVATAR);
    }

    /**
     * Check whether the user if connected to the internet.
     *
     * @param context context for accessing system service
     * @return true if the user is connected to the internet
     */
    public static boolean isNetworkAvailable(Context context) {
        ConnectivityManager connectivityManager
                = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }

    /**
     * Convenient method for storing double values in shared preferences.
     *
     * @param edit  shared preferences editor
     * @param key   preference key
     * @param value preference value
     * @return sharedpreference editor
     */
    public static SharedPreferences.Editor putDouble(final SharedPreferences.Editor edit,
                                                     final String key, final double value) {
        return edit.putLong(key, Double.doubleToRawLongBits(value));
    }

    /**
     * Convenient method for getting double values from shared preferences.
     *
     * @param prefs        shared preferences
     * @param key          preference key
     * @param defaultValue default preference value
     * @return the stored double value
     */
    public static double getDouble(final SharedPreferences prefs, final String key,
                                   final double defaultValue) {
        return Double.longBitsToDouble(prefs.getLong(key, Double.doubleToLongBits(defaultValue)));
    }

    /**
     * Whether we should log or not. Should only be used by the developer preferences.
     *
     * @param context context for accessing shared preferences
     * @return true if logging is turned on
     */
    public static boolean isDebugging(Context context) {
        return PreferenceManager.getDefaultSharedPreferences(context)
                .getBoolean(context.getString(R.string.pref_debug), false);
    }

    /**
     * Rounds the given double.
     *
     * @param value  value tobe rounded
     * @param places number of decimal places
     * @return rounded double
     */
    public static double roundDouble(double value, int places) {
        if (places < 0)
            throw new IllegalArgumentException();

        BigDecimal bd = new BigDecimal(value);
        //Half up is the standard rounding technique
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }

    /**
     * Calculate the total raw metal.
     *
     * @param rawRef    number of raw refined metal
     * @param rawRec    number of raw reclaimed metal
     * @param rawScraps number of raw scrap metal
     * @return sum of raw metal in refined
     */
    public static double getRawMetal(int rawRef, int rawRec, int rawScraps) {
        return (1.0 / 9.0 * rawScraps) + (1.0 / 3.0 * rawRec) + rawRef;
    }

    /**
     * Return the complex query string for querying the raw price
     *
     * @param context context for converting prices
     * @return the query string
     */
    public static String getRawPriceQueryString(Context context) {
        Price key = new Price(1, Currency.KEY);
        Price usd = new Price(1, Currency.USD);
        Price bud = new Price(1, Currency.BUD);

        double keyMultiplier = key.getConvertedPrice(context, Currency.METAL, false);
        double usdMultiplier = usd.getConvertedPrice(context, Currency.METAL, false);
        double budMultiplier = bud.getConvertedPrice(context, Currency.METAL, false);

        return " CASE WHEN " + PriceEntry.COLUMN_PRICE_HIGH + " IS NULL THEN ( " +
                " CASE WHEN " + PriceEntry.COLUMN_CURRENCY + " = 'keys' THEN ( " +
                PriceEntry.COLUMN_PRICE + " * " + keyMultiplier +
                " ) WHEN " + PriceEntry.COLUMN_CURRENCY + " = 'earbuds' THEN ( " +
                PriceEntry.COLUMN_PRICE + " * " + budMultiplier +
                " ) WHEN " + PriceEntry.COLUMN_CURRENCY + " = 'usd' THEN ( " +
                PriceEntry.COLUMN_PRICE + " * " + usdMultiplier +
                " ) ELSE ( " +
                PriceEntry.COLUMN_PRICE +
                " ) END " +
                " ) ELSE (" +
                " CASE WHEN " + PriceEntry.COLUMN_CURRENCY + " = 'keys' THEN ( " +
                " ( " + PriceEntry.COLUMN_PRICE + " + " + PriceEntry.COLUMN_PRICE_HIGH + ") / 2 * " + keyMultiplier +
                " ) WHEN " + PriceEntry.COLUMN_CURRENCY + " = 'earbuds' THEN ( " +
                " ( " + PriceEntry.COLUMN_PRICE + " + " + PriceEntry.COLUMN_PRICE_HIGH + ") / 2 * " + budMultiplier +
                " ) WHEN " + PriceEntry.COLUMN_CURRENCY + " = 'usd' THEN ( " +
                " ( " + PriceEntry.COLUMN_PRICE + " + " + PriceEntry.COLUMN_PRICE_HIGH + ") / 2 * " + usdMultiplier +
                " ) ELSE ( " +
                " ( " + PriceEntry.COLUMN_PRICE + " + " + PriceEntry.COLUMN_PRICE_HIGH + ") / 2 " +
                " ) END " +
                " ) END ";
    }

    /**
     * Convenience class for storing in pairs.
     */
    public static class IntegerPair {

        int x;
        int y;

        /**
         * Double parameter contructor.
         *
         * @param x first integer
         * @param y second integer
         */
        public IntegerPair(int x, int y) {
            this.x = x;
            this.y = y;
        }

        /**
         * @return X
         */
        public int getX() {
            return x;
        }

        /**
         * @param x to be set
         */
        public void setX(int x) {
            this.x = x;
        }

        /**
         * @return Y
         */
        public int getY() {
            return y;
        }

        /**
         * @param y to be set
         */
        public void setY(int y) {
            this.y = y;
        }
    }
}

